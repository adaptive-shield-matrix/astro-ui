---
import { mdiMoonWaxingCrescent, mdiWhiteBalanceSunny } from "@mdi/js"
import { buttonVariant, type ButtonVariant } from "@/button/buttonCva"
import Button from "@/button/Button.astro"
import Icon1 from "@/icon/Icon1.astro"
import { classArr } from "@/utils/classArr"
import { astroElementId } from "./astroElementId"

/*
 * have to use "is:inline" script to run/apply theme before page render -> white flash on page reload otherwise
 * https://docs.astro.build/en/tutorial/6-islands/2/
 * https://axellarsson.com/blog/astrojs-prevent-dark-mode-flicker/
 * https://docs.astro.build/en/tutorials/add-view-transitions/#update-scripts
 * https://github.com/Toxocious/toxocious.github.io/blob/main/src/components/theme_toggle/theme_toggle.astro
 */
interface Props {
  className?: string
  iconClass?: string
  variant?: ButtonVariant
}
const { className, iconClass, variant } = Astro.props
---

<Button
  variant={variant ?? buttonVariant.ghost}
  id={"themeToggle"}
  transition:name={"themeToggle"}
  title={"Toggle theme"}
  class={classArr(className)}
  contentClass={classArr("flex flex-row gap-1")}
>
  <Icon1 path={mdiWhiteBalanceSunny} class={classArr("size-6 dark:hidden mr-2", iconClass)} />
  <Icon1 path={mdiMoonWaxingCrescent} class={classArr("hidden size-6 dark:block mr-2", iconClass)} />
  <p id="theme-toggle-text-light" class={"dark:hidden"}>{"Light"}</p>
  <p id="theme-toggle-text-dark" class={"hidden dark:block"}>{"Dark"}</p>
</Button>

<script is:inline>
  const log = false

  if (log) console.log("theme-toggle script start")
  function loadTheme() {
    const stored = typeof localStorage !== "undefined" && localStorage.getItem("theme")
    if (log) console.log("loadTheme", stored)
    if (stored) {
      return stored
    }
    if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
      return "dark"
    }
    return "light"
  }

  function applyThemeToWindow(theme) {
    if (log) console.log("applyThemeToWindow", theme)
    if (theme === "light") {
      document.documentElement.classList.remove("dark")
      // document.body.classList.remove("dark")
    } else {
      document.documentElement.classList.add("dark")
      // document.body.classList.add("dark")
    }
  }

  let theme = loadTheme()

  if (log) console.log("theme", theme)

  //
  // apply theme on page load
  //
  applyThemeToWindow(theme)

  // window.localStorage.setItem('theme', theme)

  const handleToggleClick = () => {
    const element = document.documentElement
    element.classList.toggle("dark")
    const isDark = element.classList.contains("dark")
    localStorage.setItem("theme", isDark ? "dark" : "light")
    if (log) console.log("handleToggleClick", isDark ? "dark" : "light")
  }

  //
  // apply theme on button click
  //
  const themeButton = document.getElementById("themeToggle")
  if (themeButton) {
    themeButton.addEventListener("click", handleToggleClick)
  } else {
    if (log) console.log("themeButton not found")
  }

  //
  // apply theme with keyboard shortcut
  //
  document.addEventListener("keydown", (event) => {
    if (event.altKey && event.key === "s") {
      event.preventDefault()
      handleToggleClick()
    }
  })

  //
  // apply theme after view transition
  //
  document.addEventListener("astro:after-swap", function () {
    const stored = localStorage.getItem("theme")
    if (log) console.log("astro swap", stored)
    if (stored === "dark") document.documentElement.classList.toggle("dark", true)
  })

  //
  // apply theme across multiple tabs
  //
  const onStorage = (e) => {
    if (log) console.log("onStorage event", e.key)
    if (e.key !== "theme") return
    const theme = e.newValue
    if (theme) applyThemeToWindow(theme)
  }
  window.addEventListener("storage", onStorage)
  if (log) console.log("theme-toggle script end")
</script>
