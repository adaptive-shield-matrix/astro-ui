---
import { buttonCva2, type ButtonSize, type ButtonVariant } from "@/ui/button/buttonCva"
import { buttonIconCva } from "@/ui/button/buttonIconCva"
import { classesButtonClickAnimation } from "@/ui/button/classesButtonClickAnimation"
import Icon1 from "@/ui/icon/Icon1.astro"
import { classMerge } from "@/ui/utils/classMerge"

interface Props {
  id?: string
  textId?: string
  contentId?: string
  contentClass?: string
  title?: string
  text?: string
  variant?: ButtonVariant
  size?: ButtonSize
  icon?: string
  iconRight?: string
  iconClass?: string
  class?: string
  onclick?: any
}
const props = Astro.props

const classes = buttonCva2(props.variant, props.size, classesButtonClickAnimation, props.class)
const hasChildren = Astro.slots.has("default")
const hasContent = hasChildren || props.text
---

<button id={props.id} title={props.title} class={classes} onclick={props.onclick}>
  {
    props.icon && (
      <Icon1
        path={props.icon}
        class={classMerge(hasContent && "mr-2", buttonIconCva(props.variant, props.iconClass))}
      />
    )
  }
  {
    props.text && (
      <span id={props.contentId} class={props.contentClass}>
        {props.text}
      </span>
    )
  }
  {
    hasContent && (
      <span id={props.contentId} class={props.contentClass}>
        <slot />
      </span>
    )
  }
  {
    props.iconRight && (
      <Icon1 path={props.iconRight} class={buttonIconCva(props.variant, hasContent && "ml-2", props.iconClass)} />
    )
  }
</button>
